[06-09-2015] v0.0.4
'sauvegarde' is a set of tools ('serveur', 'client' and 'restore' - as of now) that saves your files in a live continuous way that is to say while they are written to disks. One interesting thing is that the server (named 'serveur') is stateless and achieves deduplication (block level). As a result it does not use much memory and may run on small machines (on a virtual machine for instance).

This is the fourth release of this project. Some improvements were made. Let's see what's new in version v0.0.4:

    * There is now a new server url to post a bunch of hashs and associated data (/Data_Array.json). The JSON string expected must contain an array named 'data_array'. Each object of this array must contain the three fields 'hash', 'data' and 'size'. Fields 'hash' and 'size' must be base64 encoded. This has the effect of buffering the communication a bit. My tests on my single computer showed that the gain of speed is at least 4 times.
    * When sending the hashs of a file in it's meta data the server answers the hashs that it needs (unknown to him). But if the file has several times the same hash that is unknown the server was answering as many times to send this hash. Now, with v0.0.4 the answer has only unique hashs, avoiding the client to send several times the same block.
    * file_backend has now a configuration section into the 'serveur.conf' file named '[file_backend]'. Two options can be configured. An option named 'file-directory' that tells the backend where to put it's files and 'dir-level' that tells the backend the number of level we want to store data. It's default value is 2 (it means that serveur will create 65536 directories). The value is limited to a maximum of 5 (ie 256^5 = 1 099 511 627 776 directories!). Keep in mind that creating the directories may last a long time if you choose a high value (It will only be done once) and also that a directory may take some space (on ext4 a level 2 takes 256 Mb but level 3 takes 64 Gb !).
    * sauvegarde is now fully translated in French and is ready for other translations (it is based on .po files).
    * Sébastien Tricaud patch was merged in this version adding the ability to catch SIGINT and clean the memory before exiting avoiding a memory leak.
    * A manual has been created and is waiting for contributions at http://write.flossmanuals.net/sauvegarde-manual/_info/.
    * TODO file has been reworked and contains new ideas that I might put in the roadmap.

Contributors to this version:
    * Olivier Delhomme
    * Sébastien Tricaud

Links:

    * Sauvegarde's project: https://github.com/dupgit/sauvegarde
    * Sauvegarde's manual (still to be created): http://write.flossmanuals.net/sauvegarde-manual/_info/
    * Sauvegarde's openhub: https://openhub.net/p/sauvegarde
    * Sauvegarde release v0.0.4: http://src.delhomme.org/download/sauvegarde/releases/sauvegarde-0.0.4.tar.xz
    * travis continuous integration status: https://travis-ci.org/dupgit/sauvegarde



[21-08-2015] v0.0.3
'sauvegarde' is a set of tools ('serveur', 'client' and 'restore' - as of now) that saves your files in a live continuous way that is to say while they are written to disks.

New features in version v0.0.3:

    * links are now saved and can be restored
    * A new test directory comes with the project where we might put some files, directories or links to test, improve and avoid regression on the project.

There is a lot of things to do and sauvegarde's project is seeking help in all range of the project (including testing, promoting, coding, translating, creating documentations...).

Links:

    * Sauvegarde's project: https://github.com/dupgit/sauvegarde
    * Sauvegarde's openhub: https://openhub.net/p/sauvegarde
    * Sauvegarde release v0.0.3: http://src.delhomme.org/download/sauvegarde/releases/sauvegarde-0.0.3.tar.xz
    * travis continuous integration status: https://travis-ci.org/dupgit/sauvegarde



[15-08-2015] v0.0.2
'sauvegarde' is a set of tools ('serveur', 'client' and 'restaure' - as of now) that saves your files in a live continuous way that is to say while they are written to disks. In this version 'client' program has been reworked and may be 75 % of it's code has changed.

New features in version v0.0.2:

    * client has been reworked and there is no more threads. As a result, the functions newly written are not threadable as is.
    * file and time requests are base64 encoded into the URL so that it can manage space without errors
    * client save written files in a live an continuous way
    * time measurement is now possible (for instance, on my computer client uses 1.5ms to know if a file is in it's cache or not)
    * restore can restore a file at a specific date (you'll have to have the right date or it'll restore the latest one in the retrieved list)

There is still a lot of work to do and one might want to look at the list of my first post at http://blog.delhomme.org/index.php?post/2015/07/08/Sauvegarde-project-first-usable-version or see the TODO file or the Roadmap section of README file or even look into the code (or doxygen documentation) for @todo tags. Any help, contributions, remarks, articles or encouragements are very welcomed.

The whole project is known to compile on x86_64 and arm7l architecture and on Debian Jessie, Ubuntu 12.04 and Centos 7 (sometimes at the expense of compiling and installing more recent dependencies - which is pretty straight (look for .travis.yml in the source code)).

Links:

    * Sauvegarde's project: https://github.com/dupgit/sauvegarde
    * Sauvegarde release v0.0.2: http://src.delhomme.org/download/sauvegarde/releases/sauvegarde-0.0.2.tar.xz
    * travis continuous integration status: https://travis-ci.org/dupgit/sauvegarde



[09-07-2015] v0.0.1
Since February 2014 I'm programming, when I have some time, something that may save my files live. The primary goal is to save files while they are being created or modified. It is still a goal to reach even if the first usable version is out today ! When I say usable I mean that one can backup files and restore them. It needs a lot of improvements and a lot of fine code review to track down the numerous memory leakages and bugs that are in this early code (Yes contributions are welcome :).

Naming is usually a very difficult task for a project and as I remarked that successful projects have simple names - like "Word" and "Windows" for instance (yes I know this is not free software) I named my project "sauvegarde" (which means backup in French). This project is composed of 3 programs right now, the one that saves your file is named "client" and is talking to the server (named "serveur" in French). The third one can restore files (also by talking to the server) and is named "restaure" (restore in French).

The whole project is known to compile on x86_64 and arm7l architecture and on Debian Jessie, Ubuntu 12.04 and Centos 7 (sometimes at the expense of compiling and installing more recent dependencies - which is pretty straight (look for .travis.yml in the source code)).

With this version first you have to setup a server and have serveur running on it. Then you have to run client each time you need to backup things (live backup will come very soon - even if linux kernel FAN notification's interface lacks some notifiers). When you want to restore a file you have to use "restaure" program (server needs to be up and accessible). At the moment you can only restore the latest version of a file.

The server has an interface to connect different backends. The first one is the flat file backend. One may program some database backend (postgresql, sqlite, mariadb...), or a different storage backend like Ceph for instance. All the data is saved in a deduplicated way and the network traffic is minimised. "client", "serveur" and "restore" talks in json language to each others.

There is still a lot of things to do such as (in no specific order):

    * Make live backup possible
    * Having the ability to restore any version of a file
    * Having the ability to restore a group of files
    * Having the ability to restore a directory (may need to patch linux's kernel FAN interface)
    * Saving symbolic links
    * Having some security for transfers (for instance https)
    * Having some security for authentication of programs each others
    * Adding server backends
    * Internationalization

If you test this program, if you compile it under a new architecture/system, if you have any question or want to report a bug please feel free to use either github's interface or your favourite email program to email me (my email address is in the source code or in AUTHORS file).

Links:

    * Sauvegarde's project: https://github.com/dupgit/sauvegarde
    * travis continuous integration status: https://travis-ci.org/dupgit/sauvegarde
